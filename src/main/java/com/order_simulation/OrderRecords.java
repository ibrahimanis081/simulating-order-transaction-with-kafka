/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.order_simulation;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OrderRecords extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1927785663777401843L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderRecords\",\"namespace\":\"com.order_simulation\",\"fields\":[{\"name\":\"userID\",\"type\":\"int\"},{\"name\":\"transactionID\",\"type\":\"int\"},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"totalcost\",\"type\":\"int\"},{\"name\":\"itemsordered\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OrderRecords> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderRecords> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrderRecords> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrderRecords> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrderRecords> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrderRecords to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrderRecords from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrderRecords instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrderRecords fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int userID;
  private int transactionID;
  private java.lang.String email;
  private int totalcost;
  private java.util.List<java.lang.String> itemsordered;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderRecords() {}

  /**
   * All-args constructor.
   * @param userID The new value for userID
   * @param transactionID The new value for transactionID
   * @param email The new value for email
   * @param totalcost The new value for totalcost
   * @param itemsordered The new value for itemsordered
   */
  public OrderRecords(java.lang.Integer userID, java.lang.Integer transactionID, java.lang.String email, java.lang.Integer totalcost, java.util.List<java.lang.String> itemsordered) {
    this.userID = userID;
    this.transactionID = transactionID;
    this.email = email;
    this.totalcost = totalcost;
    this.itemsordered = itemsordered;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userID;
    case 1: return transactionID;
    case 2: return email;
    case 3: return totalcost;
    case 4: return itemsordered;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userID = (java.lang.Integer)value$; break;
    case 1: transactionID = (java.lang.Integer)value$; break;
    case 2: email = value$ != null ? value$.toString() : null; break;
    case 3: totalcost = (java.lang.Integer)value$; break;
    case 4: itemsordered = (java.util.List<java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'userID' field.
   * @return The value of the 'userID' field.
   */
  public int getUserID() {
    return userID;
  }


  /**
   * Sets the value of the 'userID' field.
   * @param value the value to set.
   */
  public void setUserID(int value) {
    this.userID = value;
  }

  /**
   * Gets the value of the 'transactionID' field.
   * @return The value of the 'transactionID' field.
   */
  public int getTransactionID() {
    return transactionID;
  }


  /**
   * Sets the value of the 'transactionID' field.
   * @param value the value to set.
   */
  public void setTransactionID(int value) {
    this.transactionID = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.String getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.String value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'totalcost' field.
   * @return The value of the 'totalcost' field.
   */
  public int getTotalcost() {
    return totalcost;
  }


  /**
   * Sets the value of the 'totalcost' field.
   * @param value the value to set.
   */
  public void setTotalcost(int value) {
    this.totalcost = value;
  }

  /**
   * Gets the value of the 'itemsordered' field.
   * @return The value of the 'itemsordered' field.
   */
  public java.util.List<java.lang.String> getItemsordered() {
    return itemsordered;
  }


  /**
   * Sets the value of the 'itemsordered' field.
   * @param value the value to set.
   */
  public void setItemsordered(java.util.List<java.lang.String> value) {
    this.itemsordered = value;
  }

  /**
   * Creates a new OrderRecords RecordBuilder.
   * @return A new OrderRecords RecordBuilder
   */
  public static com.order_simulation.OrderRecords.Builder newBuilder() {
    return new com.order_simulation.OrderRecords.Builder();
  }

  /**
   * Creates a new OrderRecords RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderRecords RecordBuilder
   */
  public static com.order_simulation.OrderRecords.Builder newBuilder(com.order_simulation.OrderRecords.Builder other) {
    if (other == null) {
      return new com.order_simulation.OrderRecords.Builder();
    } else {
      return new com.order_simulation.OrderRecords.Builder(other);
    }
  }

  /**
   * Creates a new OrderRecords RecordBuilder by copying an existing OrderRecords instance.
   * @param other The existing instance to copy.
   * @return A new OrderRecords RecordBuilder
   */
  public static com.order_simulation.OrderRecords.Builder newBuilder(com.order_simulation.OrderRecords other) {
    if (other == null) {
      return new com.order_simulation.OrderRecords.Builder();
    } else {
      return new com.order_simulation.OrderRecords.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrderRecords instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderRecords>
    implements org.apache.avro.data.RecordBuilder<OrderRecords> {

    private int userID;
    private int transactionID;
    private java.lang.String email;
    private int totalcost;
    private java.util.List<java.lang.String> itemsordered;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.order_simulation.OrderRecords.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userID)) {
        this.userID = data().deepCopy(fields()[0].schema(), other.userID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.transactionID)) {
        this.transactionID = data().deepCopy(fields()[1].schema(), other.transactionID);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.totalcost)) {
        this.totalcost = data().deepCopy(fields()[3].schema(), other.totalcost);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.itemsordered)) {
        this.itemsordered = data().deepCopy(fields()[4].schema(), other.itemsordered);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing OrderRecords instance
     * @param other The existing instance to copy.
     */
    private Builder(com.order_simulation.OrderRecords other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.userID)) {
        this.userID = data().deepCopy(fields()[0].schema(), other.userID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transactionID)) {
        this.transactionID = data().deepCopy(fields()[1].schema(), other.transactionID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalcost)) {
        this.totalcost = data().deepCopy(fields()[3].schema(), other.totalcost);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.itemsordered)) {
        this.itemsordered = data().deepCopy(fields()[4].schema(), other.itemsordered);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'userID' field.
      * @return The value.
      */
    public int getUserID() {
      return userID;
    }


    /**
      * Sets the value of the 'userID' field.
      * @param value The value of 'userID'.
      * @return This builder.
      */
    public com.order_simulation.OrderRecords.Builder setUserID(int value) {
      validate(fields()[0], value);
      this.userID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userID' field has been set.
      * @return True if the 'userID' field has been set, false otherwise.
      */
    public boolean hasUserID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userID' field.
      * @return This builder.
      */
    public com.order_simulation.OrderRecords.Builder clearUserID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionID' field.
      * @return The value.
      */
    public int getTransactionID() {
      return transactionID;
    }


    /**
      * Sets the value of the 'transactionID' field.
      * @param value The value of 'transactionID'.
      * @return This builder.
      */
    public com.order_simulation.OrderRecords.Builder setTransactionID(int value) {
      validate(fields()[1], value);
      this.transactionID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionID' field has been set.
      * @return True if the 'transactionID' field has been set, false otherwise.
      */
    public boolean hasTransactionID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'transactionID' field.
      * @return This builder.
      */
    public com.order_simulation.OrderRecords.Builder clearTransactionID() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.order_simulation.OrderRecords.Builder setEmail(java.lang.String value) {
      validate(fields()[2], value);
      this.email = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.order_simulation.OrderRecords.Builder clearEmail() {
      email = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalcost' field.
      * @return The value.
      */
    public int getTotalcost() {
      return totalcost;
    }


    /**
      * Sets the value of the 'totalcost' field.
      * @param value The value of 'totalcost'.
      * @return This builder.
      */
    public com.order_simulation.OrderRecords.Builder setTotalcost(int value) {
      validate(fields()[3], value);
      this.totalcost = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'totalcost' field has been set.
      * @return True if the 'totalcost' field has been set, false otherwise.
      */
    public boolean hasTotalcost() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'totalcost' field.
      * @return This builder.
      */
    public com.order_simulation.OrderRecords.Builder clearTotalcost() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemsordered' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getItemsordered() {
      return itemsordered;
    }


    /**
      * Sets the value of the 'itemsordered' field.
      * @param value The value of 'itemsordered'.
      * @return This builder.
      */
    public com.order_simulation.OrderRecords.Builder setItemsordered(java.util.List<java.lang.String> value) {
      validate(fields()[4], value);
      this.itemsordered = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'itemsordered' field has been set.
      * @return True if the 'itemsordered' field has been set, false otherwise.
      */
    public boolean hasItemsordered() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'itemsordered' field.
      * @return This builder.
      */
    public com.order_simulation.OrderRecords.Builder clearItemsordered() {
      itemsordered = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderRecords build() {
      try {
        OrderRecords record = new OrderRecords();
        record.userID = fieldSetFlags()[0] ? this.userID : (java.lang.Integer) defaultValue(fields()[0]);
        record.transactionID = fieldSetFlags()[1] ? this.transactionID : (java.lang.Integer) defaultValue(fields()[1]);
        record.email = fieldSetFlags()[2] ? this.email : (java.lang.String) defaultValue(fields()[2]);
        record.totalcost = fieldSetFlags()[3] ? this.totalcost : (java.lang.Integer) defaultValue(fields()[3]);
        record.itemsordered = fieldSetFlags()[4] ? this.itemsordered : (java.util.List<java.lang.String>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderRecords>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderRecords>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderRecords>
    READER$ = (org.apache.avro.io.DatumReader<OrderRecords>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.userID);

    out.writeInt(this.transactionID);

    out.writeString(this.email);

    out.writeInt(this.totalcost);

    long size0 = this.itemsordered.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.String e0: this.itemsordered) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.userID = in.readInt();

      this.transactionID = in.readInt();

      this.email = in.readString();

      this.totalcost = in.readInt();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.String> a0 = this.itemsordered;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("itemsordered").schema());
        this.itemsordered = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.userID = in.readInt();
          break;

        case 1:
          this.transactionID = in.readInt();
          break;

        case 2:
          this.email = in.readString();
          break;

        case 3:
          this.totalcost = in.readInt();
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.String> a0 = this.itemsordered;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("itemsordered").schema());
            this.itemsordered = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










