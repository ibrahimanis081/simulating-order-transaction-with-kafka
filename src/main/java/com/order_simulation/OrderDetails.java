/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.order_simulation;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OrderDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3116879284361457138L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderDetails\",\"namespace\":\"com.order_simulation\",\"fields\":[{\"name\":\"userid\",\"type\":\"int\"},{\"name\":\"orderid\",\"type\":\"int\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"itemsordered\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"totalcost\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OrderDetails> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderDetails> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrderDetails> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrderDetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrderDetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrderDetails to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrderDetails from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrderDetails instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrderDetails fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int userid;
  private int orderid;
  private java.lang.CharSequence username;
  private java.lang.CharSequence email;
  private java.util.List<java.lang.CharSequence> itemsordered;
  private int totalcost;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderDetails() {}

  /**
   * All-args constructor.
   * @param userid The new value for userid
   * @param orderid The new value for orderid
   * @param username The new value for username
   * @param email The new value for email
   * @param itemsordered The new value for itemsordered
   * @param totalcost The new value for totalcost
   */
  public OrderDetails(java.lang.Integer userid, java.lang.Integer orderid, java.lang.CharSequence username, java.lang.CharSequence email, java.util.List<java.lang.CharSequence> itemsordered, java.lang.Integer totalcost) {
    this.userid = userid;
    this.orderid = orderid;
    this.username = username;
    this.email = email;
    this.itemsordered = itemsordered;
    this.totalcost = totalcost;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userid;
    case 1: return orderid;
    case 2: return username;
    case 3: return email;
    case 4: return itemsordered;
    case 5: return totalcost;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userid = (java.lang.Integer)value$; break;
    case 1: orderid = (java.lang.Integer)value$; break;
    case 2: username = (java.lang.CharSequence)value$; break;
    case 3: email = (java.lang.CharSequence)value$; break;
    case 4: itemsordered = (java.util.List<java.lang.CharSequence>)value$; break;
    case 5: totalcost = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'userid' field.
   * @return The value of the 'userid' field.
   */
  public int getUserid() {
    return userid;
  }


  /**
   * Sets the value of the 'userid' field.
   * @param value the value to set.
   */
  public void setUserid(int value) {
    this.userid = value;
  }

  /**
   * Gets the value of the 'orderid' field.
   * @return The value of the 'orderid' field.
   */
  public int getOrderid() {
    return orderid;
  }


  /**
   * Sets the value of the 'orderid' field.
   * @param value the value to set.
   */
  public void setOrderid(int value) {
    this.orderid = value;
  }

  /**
   * Gets the value of the 'username' field.
   * @return The value of the 'username' field.
   */
  public java.lang.CharSequence getUsername() {
    return username;
  }


  /**
   * Sets the value of the 'username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'itemsordered' field.
   * @return The value of the 'itemsordered' field.
   */
  public java.util.List<java.lang.CharSequence> getItemsordered() {
    return itemsordered;
  }


  /**
   * Sets the value of the 'itemsordered' field.
   * @param value the value to set.
   */
  public void setItemsordered(java.util.List<java.lang.CharSequence> value) {
    this.itemsordered = value;
  }

  /**
   * Gets the value of the 'totalcost' field.
   * @return The value of the 'totalcost' field.
   */
  public int getTotalcost() {
    return totalcost;
  }


  /**
   * Sets the value of the 'totalcost' field.
   * @param value the value to set.
   */
  public void setTotalcost(int value) {
    this.totalcost = value;
  }

  /**
   * Creates a new OrderDetails RecordBuilder.
   * @return A new OrderDetails RecordBuilder
   */
  public static com.order_simulation.OrderDetails.Builder newBuilder() {
    return new com.order_simulation.OrderDetails.Builder();
  }

  /**
   * Creates a new OrderDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderDetails RecordBuilder
   */
  public static com.order_simulation.OrderDetails.Builder newBuilder(com.order_simulation.OrderDetails.Builder other) {
    if (other == null) {
      return new com.order_simulation.OrderDetails.Builder();
    } else {
      return new com.order_simulation.OrderDetails.Builder(other);
    }
  }

  /**
   * Creates a new OrderDetails RecordBuilder by copying an existing OrderDetails instance.
   * @param other The existing instance to copy.
   * @return A new OrderDetails RecordBuilder
   */
  public static com.order_simulation.OrderDetails.Builder newBuilder(com.order_simulation.OrderDetails other) {
    if (other == null) {
      return new com.order_simulation.OrderDetails.Builder();
    } else {
      return new com.order_simulation.OrderDetails.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrderDetails instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderDetails>
    implements org.apache.avro.data.RecordBuilder<OrderDetails> {

    private int userid;
    private int orderid;
    private java.lang.CharSequence username;
    private java.lang.CharSequence email;
    private java.util.List<java.lang.CharSequence> itemsordered;
    private int totalcost;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.order_simulation.OrderDetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userid)) {
        this.userid = data().deepCopy(fields()[0].schema(), other.userid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.orderid)) {
        this.orderid = data().deepCopy(fields()[1].schema(), other.orderid);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.username)) {
        this.username = data().deepCopy(fields()[2].schema(), other.username);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.itemsordered)) {
        this.itemsordered = data().deepCopy(fields()[4].schema(), other.itemsordered);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.totalcost)) {
        this.totalcost = data().deepCopy(fields()[5].schema(), other.totalcost);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing OrderDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(com.order_simulation.OrderDetails other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.userid)) {
        this.userid = data().deepCopy(fields()[0].schema(), other.userid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orderid)) {
        this.orderid = data().deepCopy(fields()[1].schema(), other.orderid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.username)) {
        this.username = data().deepCopy(fields()[2].schema(), other.username);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.itemsordered)) {
        this.itemsordered = data().deepCopy(fields()[4].schema(), other.itemsordered);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.totalcost)) {
        this.totalcost = data().deepCopy(fields()[5].schema(), other.totalcost);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'userid' field.
      * @return The value.
      */
    public int getUserid() {
      return userid;
    }


    /**
      * Sets the value of the 'userid' field.
      * @param value The value of 'userid'.
      * @return This builder.
      */
    public com.order_simulation.OrderDetails.Builder setUserid(int value) {
      validate(fields()[0], value);
      this.userid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userid' field has been set.
      * @return True if the 'userid' field has been set, false otherwise.
      */
    public boolean hasUserid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userid' field.
      * @return This builder.
      */
    public com.order_simulation.OrderDetails.Builder clearUserid() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderid' field.
      * @return The value.
      */
    public int getOrderid() {
      return orderid;
    }


    /**
      * Sets the value of the 'orderid' field.
      * @param value The value of 'orderid'.
      * @return This builder.
      */
    public com.order_simulation.OrderDetails.Builder setOrderid(int value) {
      validate(fields()[1], value);
      this.orderid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orderid' field has been set.
      * @return True if the 'orderid' field has been set, false otherwise.
      */
    public boolean hasOrderid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'orderid' field.
      * @return This builder.
      */
    public com.order_simulation.OrderDetails.Builder clearOrderid() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'username' field.
      * @return The value.
      */
    public java.lang.CharSequence getUsername() {
      return username;
    }


    /**
      * Sets the value of the 'username' field.
      * @param value The value of 'username'.
      * @return This builder.
      */
    public com.order_simulation.OrderDetails.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.username = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'username' field.
      * @return This builder.
      */
    public com.order_simulation.OrderDetails.Builder clearUsername() {
      username = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.order_simulation.OrderDetails.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.email = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.order_simulation.OrderDetails.Builder clearEmail() {
      email = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemsordered' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getItemsordered() {
      return itemsordered;
    }


    /**
      * Sets the value of the 'itemsordered' field.
      * @param value The value of 'itemsordered'.
      * @return This builder.
      */
    public com.order_simulation.OrderDetails.Builder setItemsordered(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.itemsordered = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'itemsordered' field has been set.
      * @return True if the 'itemsordered' field has been set, false otherwise.
      */
    public boolean hasItemsordered() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'itemsordered' field.
      * @return This builder.
      */
    public com.order_simulation.OrderDetails.Builder clearItemsordered() {
      itemsordered = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalcost' field.
      * @return The value.
      */
    public int getTotalcost() {
      return totalcost;
    }


    /**
      * Sets the value of the 'totalcost' field.
      * @param value The value of 'totalcost'.
      * @return This builder.
      */
    public com.order_simulation.OrderDetails.Builder setTotalcost(int value) {
      validate(fields()[5], value);
      this.totalcost = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'totalcost' field has been set.
      * @return True if the 'totalcost' field has been set, false otherwise.
      */
    public boolean hasTotalcost() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'totalcost' field.
      * @return This builder.
      */
    public com.order_simulation.OrderDetails.Builder clearTotalcost() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderDetails build() {
      try {
        OrderDetails record = new OrderDetails();
        record.userid = fieldSetFlags()[0] ? this.userid : (java.lang.Integer) defaultValue(fields()[0]);
        record.orderid = fieldSetFlags()[1] ? this.orderid : (java.lang.Integer) defaultValue(fields()[1]);
        record.username = fieldSetFlags()[2] ? this.username : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.email = fieldSetFlags()[3] ? this.email : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.itemsordered = fieldSetFlags()[4] ? this.itemsordered : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        record.totalcost = fieldSetFlags()[5] ? this.totalcost : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderDetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderDetails>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderDetails>
    READER$ = (org.apache.avro.io.DatumReader<OrderDetails>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.userid);

    out.writeInt(this.orderid);

    out.writeString(this.username);

    out.writeString(this.email);

    long size0 = this.itemsordered.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.itemsordered) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeInt(this.totalcost);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.userid = in.readInt();

      this.orderid = in.readInt();

      this.username = in.readString(this.username instanceof Utf8 ? (Utf8)this.username : null);

      this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.itemsordered;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("itemsordered").schema());
        this.itemsordered = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      this.totalcost = in.readInt();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.userid = in.readInt();
          break;

        case 1:
          this.orderid = in.readInt();
          break;

        case 2:
          this.username = in.readString(this.username instanceof Utf8 ? (Utf8)this.username : null);
          break;

        case 3:
          this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.itemsordered;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("itemsordered").schema());
            this.itemsordered = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 5:
          this.totalcost = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










